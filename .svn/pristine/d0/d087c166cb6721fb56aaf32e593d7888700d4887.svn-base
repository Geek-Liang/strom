<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans.xsd  
                        http://www.springframework.org/schema/context 
                        http://www.springframework.org/schema/context/spring-context.xsd  
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/aop 
                        http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.bcdbook.base.controller" />
	<context:component-scan base-package="com.bcdbook.user.controller" />
	<context:component-scan base-package="com.bcdbook.menu.controller" />
	<context:component-scan base-package="com.bcdbook.wechat.controller" />
	
	
	<!-- 这是用来测试的配置项,正式上线前需要去掉 -->
	<context:component-scan base-package="com.bcdbook.demos" />
	
	
	<mvc:annotation-driven/>
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<!-- 设置前置名 -->
		<property name="prefix" value="/WEB-INF/views/" />
		<!-- 设置后缀 -->
		<property name="suffix" value=".jsp" />
		<!-- <property name="suffix" value=".html" /> -->
	</bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="1048576000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean> 
    
   <!-- 定时器的相关配置 -->
	<!-- 定义处理业务的类 -->
	<bean id="WechatSettime" class="com.bcdbook.util.settime.WechatSettime" />
	
	<bean id="businessObject" class="com.bcdbook.demos.settime.ThisTimeTodo" />
	<!-- 配置所执行的方法的细节 -->
	<bean id="refreshAccessToken" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 执行的类(映射) -->
		<property name="targetObject" ref="WechatSettime" />
		<!-- 执行的方法 -->
		<property name="targetMethod" value="refreshAccessToken" />
		<!-- 实例化后是否立即执行 -->
		<property name="concurrent" value="false" />
	</bean>
	
	
	<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 执行的类(映射) -->
		<property name="targetObject" ref="businessObject" />
		<!-- 执行的方法 -->
		<property name="targetMethod" value="doSome" />
		<!-- 实例化后是否立即执行 -->
		<property name="concurrent" value="false" />
	</bean>
	<bean id="jobDetail2" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 执行的类(映射) -->
		<property name="targetObject" ref="businessObject" />
		<!-- 执行的方法 -->
		<property name="targetMethod" value="doSome2" />
		<!-- 实例化后是否立即执行 -->
		<property name="concurrent" value="false" />
	</bean>
	
	<!-- 间隔多久执行的配置 -->
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<!-- see the example of method invoking job above -->
		<!-- 映射执行的方法 -->
		<property name="jobDetail" ref="refreshAccessToken" />
		<!-- 10 seconds -->
		<!-- 首次执行的时候推辞的时间(时间均已毫秒计算) -->
		<!-- <property name="startDelay" value="5000" /> -->
		<!-- 每隔15分钟执行一次 -->
		<!-- <property name="repeatInterval" value="900000" /> -->
		<property name="repeatInterval" value="3000" />
	</bean>
	
	
	<!-- 定义到时间点的配置 -->
	<!-- <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
    	<property name="jobDetail" ref="jobDetail" />
    	<property name="cronExpression" value="0 31 09 * * ?" />每天12:00运行一次
    </bean> -->
    <!-- 另一种触发器是CornTrigger,每隔多久执行一次 -->
     <bean id="cornTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
       <property name="jobDetail" ref="jobDetail2"/>
       <!-- 每个10秒触发 -->
       <property name="cronExpression" value="0 09 11 * * ?"/>
    </bean>
    <!-- 
	    0 0 10,14,16 * * ? 每天上午10点，下午2点，4点 
		0 0/30 9-17 * * ? 朝九晚五工作时间内每半小时 
		0 0 12 ? * WED 表示每个星期三中午12点 
		"0 0 12 * * ?" 每天中午12点触发 
		"0 15 10 ? * *" 每天上午10:15触发 
		"0 15 10 * * ?" 每天上午10:15触发 
		"0 15 10 * * ? *" 每天上午10:15触发 
		"0 15 10 * * ? 2005" 2005年的每天上午10:15触发 
		"0 * 14 * * ?" 在每天下午2点到下午2:59期间的每1分钟触发 
		"0 0/5 14 * * ?" 在每天下午2点到下午2:55期间的每5分钟触发 
		"0 0/5 14,18 * * ?" 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 
		"0 0-5 14 * * ?" 在每天下午2点到下午2:05期间的每1分钟触发 
		"0 10,44 14 ? 3 WED" 每年三月的星期三的下午2:10和2:44触发 
		"0 15 10 ? * MON-FRI" 周一至周五的上午10:15触发 
		"0 15 10 15 * ?" 每月15日上午10:15触发 
		"0 15 10 L * ?" 每月最后一日的上午10:15触发 
		"0 15 10 ? * 6L" 每月的最后一个星期五上午10:15触发 
		"0 15 10 ? * 6L 2002-2005" 2002年至2005年的每月的最后一个星期五上午10:15触发 
		"0 15 10 ? * 6#3" 每月的第三个星期五上午10:15触发
     -->

	<!-- 总调度用于启动Spring定时器 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="simpleTrigger" />
			<!-- 
				<ref bean="cornTrigger" />
				<ref bean="simpleTrigger" />
				 -->
			</list>
		</property>
	</bean>
	<!-- 定时器配置结束 -->
	
    <!-- 拦截器配置 -->
    <!-- 设置过滤掉的静态资源 -->
    <!-- 可以通过这种方式,映射出所有的公共资源 -->
	<mvc:resources location="/public/" mapping="/public/**"/>
	<mvc:resources location="/static/" mapping="/static/**"/>
    <!-- <mvc:resources mapping="/js/**" location="/public/javascript/"/>    
	<mvc:resources mapping="/css/**" location="/static_resources/css/"/>    
	<mvc:resources mapping="/images/**" location="/static_resources/images/"/> -->
    <!-- 配置拦截器, 多个拦截器,顺序执行 -->  
	<mvc:interceptors>    
	    <mvc:interceptor>    
	        <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->  
	        <mvc:mapping path="/**" />  
	        <!-- <mvc:mapping path="/user/**" />  
	        <mvc:mapping path="/test/**" />  -->
	        <bean class="com.bcdbook.demos.interceptor.CommonInterceptor"></bean>    
	    </mvc:interceptor>  
	    <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->  
	</mvc:interceptors>
	<!-- 拦截器配置结束 -->
</beans>